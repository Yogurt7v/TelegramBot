require('dotenv').config();
const { Bot, GrammyError, HttpError, Keyboard, InlineKeyboard } = require('grammy');

const bot = new Bot(process.env.BOT_API_KEY);

// –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ
bot.api.setMyCommands([
  {
    command: 'start',
    description: '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã',
  },
  {
    command: 'say_somthing',
    description: '–°–æ–æ–±—â–µ–Ω–∏–µ',
  },
  {
    command: 'sing',
    description: '–°–ø–æ—ë—Ç –ø–µ—Å–µ–Ω–∫—É',
  },
  {
    command: 'your_id',
    description: '–í–∞—à ID –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º',
  },
  {
    command: 'date',
    description: '–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞',
  },
  {
    command: 'mood',
    description: '–û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
  },
  {
    command: 'eat',
    description: '–ö–∞–∫ –Ω–∞—Å—á—ë—Ç –ø–µ—Ä–µ–∫—É—Å–∏—Ç—å)?',
  },
  //   {
  //     command: "share",
  //     description: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
  //   },
]);

//–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞. –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∫–æ–ª–±—ç–∫
//ctx - context
bot.command('start', async (ctx) => {
  await ctx.react('üçæ');
  await ctx.reply("–ü—Ä–∏–≤–µ—Ç! –¢–µ—Å—Ç–æ–≤—ã–π –Ω–∞ —Å–≤—è–∑–∏ <a href='https://google.com'>Google</a>", {
    parse_mode: 'HTML',
  });
});

//–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
bot.command('mood', async (ctx) => {
  //   const keyboard = new Keyboard()
  //     .text("OK")
  //     .row()
  //     .text("NORM")
  //     .text("BAD")
  //     .resized()
  //     .oneTime();
  const moodLabels = ['OK', 'NORM', 'BAD'];
  const rows = moodLabels.map((label) => {
    return [Keyboard.text(label)];
  });
  const keyboard2 = Keyboard.from(rows).resized();

  await ctx.reply('–û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è', {
    reply_markup: keyboard2,
  });
});

// bot.command('share', async (ctx) => {
//     const shareKeyboard = new Keyboard().requestLocation('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º').requestContact('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏').requestPoll('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—Ä–æ—Å–æ–º').resized().oneTime();
//     await ctx.reply('–ö–Ω–æ–ø–∫–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è', { reply_markup: shareKeyboard });
// })

bot.command('eat', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('—Å—É—à–∏', 'sushi')
    .text('–ø–∏—Ü—Ü–∞', 'pizza')
    .text('–±—É—Ä–≥–µ—Ä', 'burger')
    .row()
    .text('–•—É–¥–µ–µ–º!', 'exit');
  await ctx.reply('–ß—ë –ø–æ—Ö–∞–≤–∞–µ–º?', { reply_markup: keyboard });
});

bot.callbackQuery(['sushi', 'pizza', 'burger', 'exit'], async (ctx) => {
  await ctx.answerCallbackQuery('–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω');
  if (ctx.match === 'sushi') {
    await ctx.reply('–û–ø—è—Ç—å —Å—É—à–∏?(');
  }
  if (ctx.match === 'pizza') {
    await ctx.reply('–õ—é–±–ª—é –ø–∏—Ü—Ü—É');
  }
  if (ctx.match === 'burger') {
    await ctx.reply('–ñ–∏—Ä–µ—Ç—å —Ç–∞–∫ –∂–∏—Ä–µ—Ç—å');
  }
  if (ctx.match === 'exit') {
    await ctx.reply('–•–æ—Ä–æ—à–æ. –ë—É–¥–µ–º –ø–∏—Ç–∞—Ç—å—Å—è —Å–æ–ª–Ω—Ü–µ–º.');
  }
});

bot.command('your_id', async (ctx) => {
  await ctx.reply(`–í–∞—à ID: ${ctx.from.id}. –í–∞—à —é–∑–µ—Ä–Ω–µ–∏ÃÜ–º: ${ctx.from.username}`);
});

// –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
bot.hears('OK', async (ctx) => {
  await ctx.reply('–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ');
});
bot.hears('NORM', async (ctx) => {
  await ctx.reply('–ù—É –∏ —Å–ª–∞–≤–Ω–æ', {
    reply_markup: {
      remove_keyboard: true,
    },
  });
});
bot.hears('BAD', async (ctx) => {
  await ctx.reply('–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?');
});

// –ø–æ–ª—É—á–µ–Ω–∏—è :text/photo/video/audio/voice/file... //::url = message:entires:url
bot.on([':media', '::url'], async (ctx) => {
  await ctx.reply('–°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞');
});

bot.on(':photo').on('::hashtag', async (ctx) => {
  await ctx.reply('–§–æ—Ç–æ c —Ç–µ–≥–æ–º –ø–æ–ª—É—á–µ–Ω–æ');
});

// —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–∏–º–∏—Ä—É—é—Ç—Å—è//
bot.hears(['–ó–¥–æ—Ä–æ–≤–æ', '–ø—Ä–∏–≤–µ—Ç'], async (ctx) => {
  await ctx.reply('–ù—É –ø—Ä–∏–≤–µ—Ç');
});

// —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
bot.hears(/–º–∞—Ç/, async (ctx) => {
  await ctx.reply('–ù–µ —Ä—É–≥–∞–π—Å—è!');
});

bot.command(['say_somthing', 'sing'], async (ctx) => {
  await ctx.reply('–ê —Å–∫–∞–∑–∞—Ç—å —Ç–æ –∏ –Ω–µ—á–µ–≥–æ)');
});

bot.command('date', async (ctx) => {
  const date = new Date().toLocaleDateString('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: 'numeric',
    minute: 'numeric',
    second: 'numeric',
  });
  await ctx.reply(`–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: ${date}`);
});

//—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ç —Ä–∞–∑–±–æ—Ä –æ—à–∏–±–æ–∫
bot.catch((err) => {
  const ctx = err.ctx;
  console.log(`–í –¥–∞–Ω–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ${ctx.update.update_id}`);
  const e = err.error;
  if (e instanceof GrammyError) {
    console.log('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞', e.description);
  } else if (e instanceof HttpError) {
    console.log('–ù–µ—Ç —Å–≤—è–∑–∏ —Å –¢–µ–ª–µ–≥—Ä–∞–º', e.description);
  } else {
    console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', e.description);
  }
});

bot
  .start()
  .then(() => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω');
  })
  .catch((error) => {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error.message);
  });
